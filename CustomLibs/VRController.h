//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `VRController.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __VRController_h__
#define __VRController_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompVRController
{

class VRController;
class VRControllerPrx;

}

namespace RoboCompVRController
{

struct Pose
{
    float x;
    float y;
    float z;
    float rx;
    float ry;
    float rz;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const float&, const float&, const float&, const float&, const float&, const float&> ice_tuple() const
    {
        return std::tie(x, y, z, rx, ry, rz);
    }
};

struct Controller
{
    float trigger;
    float grab;
    float x;
    float y;
    float thumbstickCapTouch;
    bool aButton;
    float aButtonCapTouch;
    bool bButton;
    float bButtonCapTouch;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const float&, const float&, const float&, const float&, const float&, const bool&, const float&, const bool&, const float&> ice_tuple() const
    {
        return std::tie(trigger, grab, x, y, thumbstickCapTouch, aButton, aButtonCapTouch, bButton, bButtonCapTouch);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace RoboCompVRController
{

class VRController : public virtual ::Ice::Object
{
public:

    using ProxyType = VRControllerPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void sendControllers(Controller left, Controller right, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_sendControllers(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void sendPose(Pose head, Pose left, Pose right, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_sendPose(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace RoboCompVRController
{

class VRControllerPrx : public virtual ::Ice::Proxy<VRControllerPrx, ::Ice::ObjectPrx>
{
public:

    void sendControllers(const Controller& left, const Controller& right, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &VRControllerPrx::_iceI_sendControllers, left, right, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto sendControllersAsync(const Controller& left, const Controller& right, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &VRControllerPrx::_iceI_sendControllers, left, right, context);
    }

    ::std::function<void()>
    sendControllersAsync(const Controller& left, const Controller& right,
                         ::std::function<void()> response,
                         ::std::function<void(::std::exception_ptr)> ex = nullptr,
                         ::std::function<void(bool)> sent = nullptr,
                         const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompVRController::VRControllerPrx::_iceI_sendControllers, left, right, context);
    }

    /// \cond INTERNAL
    void _iceI_sendControllers(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const Controller&, const Controller&, const ::Ice::Context&);
    /// \endcond

    void sendPose(const Pose& head, const Pose& left, const Pose& right, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &VRControllerPrx::_iceI_sendPose, head, left, right, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto sendPoseAsync(const Pose& head, const Pose& left, const Pose& right, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &VRControllerPrx::_iceI_sendPose, head, left, right, context);
    }

    ::std::function<void()>
    sendPoseAsync(const Pose& head, const Pose& left, const Pose& right,
                  ::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompVRController::VRControllerPrx::_iceI_sendPose, head, left, right, context);
    }

    /// \cond INTERNAL
    void _iceI_sendPose(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const Pose&, const Pose&, const Pose&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    VRControllerPrx() = default;
    friend ::std::shared_ptr<VRControllerPrx> IceInternal::createProxy<VRControllerPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::RoboCompVRController::Pose>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 24;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompVRController::Pose, S>
{
    static void read(S* istr, ::RoboCompVRController::Pose& v)
    {
        istr->readAll(v.x, v.y, v.z, v.rx, v.ry, v.rz);
    }
};

template<>
struct StreamableTraits<::RoboCompVRController::Controller>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 30;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompVRController::Controller, S>
{
    static void read(S* istr, ::RoboCompVRController::Controller& v)
    {
        istr->readAll(v.trigger, v.grab, v.x, v.y, v.thumbstickCapTouch, v.aButton, v.aButtonCapTouch, v.bButton, v.bButtonCapTouch);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace RoboCompVRController
{

using VRControllerPtr = ::std::shared_ptr<VRController>;
using VRControllerPrxPtr = ::std::shared_ptr<VRControllerPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompVRController
{

class VRController;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< VRController>&);
::IceProxy::Ice::Object* upCast(VRController*);
/// \endcond

}

}

namespace RoboCompVRController
{

class VRController;
/// \cond INTERNAL
::Ice::Object* upCast(VRController*);
/// \endcond
typedef ::IceInternal::Handle< VRController> VRControllerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompVRController::VRController> VRControllerPrx;
typedef VRControllerPrx VRControllerPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(VRControllerPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace RoboCompVRController
{

struct Pose
{
    ::Ice::Float x;
    ::Ice::Float y;
    ::Ice::Float z;
    ::Ice::Float rx;
    ::Ice::Float ry;
    ::Ice::Float rz;
};

struct Controller
{
    ::Ice::Float trigger;
    ::Ice::Float grab;
    ::Ice::Float x;
    ::Ice::Float y;
    ::Ice::Float thumbstickCapTouch;
    bool aButton;
    ::Ice::Float aButtonCapTouch;
    bool bButton;
    ::Ice::Float bButtonCapTouch;
};

}

namespace RoboCompVRController
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompVRController::VRController::begin_sendControllers.
 * Create a wrapper instance by calling ::RoboCompVRController::newCallback_VRController_sendControllers.
 */
class Callback_VRController_sendControllers_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_VRController_sendControllers_Base> Callback_VRController_sendControllersPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompVRController::VRController::begin_sendPose.
 * Create a wrapper instance by calling ::RoboCompVRController::newCallback_VRController_sendPose.
 */
class Callback_VRController_sendPose_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_VRController_sendPose_Base> Callback_VRController_sendPosePtr;

}

namespace IceProxy
{

namespace RoboCompVRController
{

class VRController : public virtual ::Ice::Proxy<VRController, ::IceProxy::Ice::Object>
{
public:

    void sendControllers(const ::RoboCompVRController::Controller& left, const ::RoboCompVRController::Controller& right, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_sendControllers(_iceI_begin_sendControllers(left, right, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_sendControllers(const ::RoboCompVRController::Controller& left, const ::RoboCompVRController::Controller& right, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_sendControllers(left, right, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendControllers(const ::RoboCompVRController::Controller& left, const ::RoboCompVRController::Controller& right, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendControllers(left, right, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_sendControllers(const ::RoboCompVRController::Controller& left, const ::RoboCompVRController::Controller& right, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendControllers(left, right, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_sendControllers(const ::RoboCompVRController::Controller& left, const ::RoboCompVRController::Controller& right, const ::RoboCompVRController::Callback_VRController_sendControllersPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendControllers(left, right, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_sendControllers(const ::RoboCompVRController::Controller& left, const ::RoboCompVRController::Controller& right, const ::Ice::Context& context, const ::RoboCompVRController::Callback_VRController_sendControllersPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendControllers(left, right, context, cb, cookie);
    }

    void end_sendControllers(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_sendControllers(const ::RoboCompVRController::Controller&, const ::RoboCompVRController::Controller&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void sendPose(const ::RoboCompVRController::Pose& head, const ::RoboCompVRController::Pose& left, const ::RoboCompVRController::Pose& right, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_sendPose(_iceI_begin_sendPose(head, left, right, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_sendPose(const ::RoboCompVRController::Pose& head, const ::RoboCompVRController::Pose& left, const ::RoboCompVRController::Pose& right, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_sendPose(head, left, right, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendPose(const ::RoboCompVRController::Pose& head, const ::RoboCompVRController::Pose& left, const ::RoboCompVRController::Pose& right, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendPose(head, left, right, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_sendPose(const ::RoboCompVRController::Pose& head, const ::RoboCompVRController::Pose& left, const ::RoboCompVRController::Pose& right, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendPose(head, left, right, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_sendPose(const ::RoboCompVRController::Pose& head, const ::RoboCompVRController::Pose& left, const ::RoboCompVRController::Pose& right, const ::RoboCompVRController::Callback_VRController_sendPosePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendPose(head, left, right, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_sendPose(const ::RoboCompVRController::Pose& head, const ::RoboCompVRController::Pose& left, const ::RoboCompVRController::Pose& right, const ::Ice::Context& context, const ::RoboCompVRController::Callback_VRController_sendPosePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendPose(head, left, right, context, cb, cookie);
    }

    void end_sendPose(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_sendPose(const ::RoboCompVRController::Pose&, const ::RoboCompVRController::Pose&, const ::RoboCompVRController::Pose&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace RoboCompVRController
{

class VRController : public virtual ::Ice::Object
{
public:

    typedef VRControllerPrx ProxyType;
    typedef VRControllerPtr PointerType;

    virtual ~VRController();

#ifdef ICE_CPP11_COMPILER
    VRController() = default;
    VRController(const VRController&) = default;
    VRController& operator=(const VRController&) = default;
#endif

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void sendControllers(const Controller& left, const Controller& right, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_sendControllers(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void sendPose(const Pose& head, const Pose& left, const Pose& right, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_sendPose(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const VRController& lhs, const VRController& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const VRController& lhs, const VRController& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompVRController::Pose>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 24;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompVRController::Pose, S>
{
    static void write(S* ostr, const ::RoboCompVRController::Pose& v)
    {
        ostr->write(v.x);
        ostr->write(v.y);
        ostr->write(v.z);
        ostr->write(v.rx);
        ostr->write(v.ry);
        ostr->write(v.rz);
    }
};

template<typename S>
struct StreamReader< ::RoboCompVRController::Pose, S>
{
    static void read(S* istr, ::RoboCompVRController::Pose& v)
    {
        istr->read(v.x);
        istr->read(v.y);
        istr->read(v.z);
        istr->read(v.rx);
        istr->read(v.ry);
        istr->read(v.rz);
    }
};

template<>
struct StreamableTraits< ::RoboCompVRController::Controller>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 30;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompVRController::Controller, S>
{
    static void write(S* ostr, const ::RoboCompVRController::Controller& v)
    {
        ostr->write(v.trigger);
        ostr->write(v.grab);
        ostr->write(v.x);
        ostr->write(v.y);
        ostr->write(v.thumbstickCapTouch);
        ostr->write(v.aButton);
        ostr->write(v.aButtonCapTouch);
        ostr->write(v.bButton);
        ostr->write(v.bButtonCapTouch);
    }
};

template<typename S>
struct StreamReader< ::RoboCompVRController::Controller, S>
{
    static void read(S* istr, ::RoboCompVRController::Controller& v)
    {
        istr->read(v.trigger);
        istr->read(v.grab);
        istr->read(v.x);
        istr->read(v.y);
        istr->read(v.thumbstickCapTouch);
        istr->read(v.aButton);
        istr->read(v.aButtonCapTouch);
        istr->read(v.bButton);
        istr->read(v.bButtonCapTouch);
    }
};

}
/// \endcond

namespace RoboCompVRController
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompVRController::VRController::begin_sendControllers.
 * Create a wrapper instance by calling ::RoboCompVRController::newCallback_VRController_sendControllers.
 */
template<class T>
class CallbackNC_VRController_sendControllers : public Callback_VRController_sendControllers_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_VRController_sendControllers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompVRController::VRController::begin_sendControllers.
 */
template<class T> Callback_VRController_sendControllersPtr
newCallback_VRController_sendControllers(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_VRController_sendControllers<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompVRController::VRController::begin_sendControllers.
 */
template<class T> Callback_VRController_sendControllersPtr
newCallback_VRController_sendControllers(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_VRController_sendControllers<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompVRController::VRController::begin_sendControllers.
 */
template<class T> Callback_VRController_sendControllersPtr
newCallback_VRController_sendControllers(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_VRController_sendControllers<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompVRController::VRController::begin_sendControllers.
 */
template<class T> Callback_VRController_sendControllersPtr
newCallback_VRController_sendControllers(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_VRController_sendControllers<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompVRController::VRController::begin_sendControllers.
 * Create a wrapper instance by calling ::RoboCompVRController::newCallback_VRController_sendControllers.
 */
template<class T, typename CT>
class Callback_VRController_sendControllers : public Callback_VRController_sendControllers_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_VRController_sendControllers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompVRController::VRController::begin_sendControllers.
 */
template<class T, typename CT> Callback_VRController_sendControllersPtr
newCallback_VRController_sendControllers(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_VRController_sendControllers<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompVRController::VRController::begin_sendControllers.
 */
template<class T, typename CT> Callback_VRController_sendControllersPtr
newCallback_VRController_sendControllers(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_VRController_sendControllers<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompVRController::VRController::begin_sendControllers.
 */
template<class T, typename CT> Callback_VRController_sendControllersPtr
newCallback_VRController_sendControllers(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_VRController_sendControllers<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompVRController::VRController::begin_sendControllers.
 */
template<class T, typename CT> Callback_VRController_sendControllersPtr
newCallback_VRController_sendControllers(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_VRController_sendControllers<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompVRController::VRController::begin_sendPose.
 * Create a wrapper instance by calling ::RoboCompVRController::newCallback_VRController_sendPose.
 */
template<class T>
class CallbackNC_VRController_sendPose : public Callback_VRController_sendPose_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_VRController_sendPose(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompVRController::VRController::begin_sendPose.
 */
template<class T> Callback_VRController_sendPosePtr
newCallback_VRController_sendPose(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_VRController_sendPose<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompVRController::VRController::begin_sendPose.
 */
template<class T> Callback_VRController_sendPosePtr
newCallback_VRController_sendPose(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_VRController_sendPose<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompVRController::VRController::begin_sendPose.
 */
template<class T> Callback_VRController_sendPosePtr
newCallback_VRController_sendPose(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_VRController_sendPose<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompVRController::VRController::begin_sendPose.
 */
template<class T> Callback_VRController_sendPosePtr
newCallback_VRController_sendPose(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_VRController_sendPose<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompVRController::VRController::begin_sendPose.
 * Create a wrapper instance by calling ::RoboCompVRController::newCallback_VRController_sendPose.
 */
template<class T, typename CT>
class Callback_VRController_sendPose : public Callback_VRController_sendPose_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_VRController_sendPose(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompVRController::VRController::begin_sendPose.
 */
template<class T, typename CT> Callback_VRController_sendPosePtr
newCallback_VRController_sendPose(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_VRController_sendPose<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompVRController::VRController::begin_sendPose.
 */
template<class T, typename CT> Callback_VRController_sendPosePtr
newCallback_VRController_sendPose(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_VRController_sendPose<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompVRController::VRController::begin_sendPose.
 */
template<class T, typename CT> Callback_VRController_sendPosePtr
newCallback_VRController_sendPose(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_VRController_sendPose<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompVRController::VRController::begin_sendPose.
 */
template<class T, typename CT> Callback_VRController_sendPosePtr
newCallback_VRController_sendPose(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_VRController_sendPose<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
